// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        var int i, val;
        let twoToThe = Array.new(16);
        let i = 0;
        let val = 1;
        while(i < 16){
            let twoToThe[i] = val;
            let i = i + 1;
            let val = val + val;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0){
            return x;
        }
        else{
            return -x;    
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i; 
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < 16){
            if(Math.bit(y, i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
       
    }

    function boolean bit(int y, int i){
        return ~((twoToThe[i] & y) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, ans, tX, tY;
        var boolean neg;
        let tX = Math.abs(x);
        let tY = Math.abs(y);
        let neg = false;

        if (x < 0 | y < 0){
            let neg = true;
        }

        let tX = Math.abs(x);
        let tY = Math.abs(y);

        if(tY > tX | tY < 0 ){
            return 0;
        }

        let q = Math.divide(tX, 2 * tY);
        if ((tX - ((2 * q) * tY)) < tY){
            let ans = 2 * q;
        } else{
            let ans = 2 * q + 1;
        }
        if (neg){
            return -ans;
        }else{
            return ans;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, y2j2;
        let y = 0;
        let i = 7; //[0..7] aka twoToThe

        while (~(i < 0)){
            let y2j2 = (y + twoToThe[i]) * (y + twoToThe[i]);
            if(~(y2j2 > x) & (y2j2 > 0)){
                let y = y + twoToThe[i];
            }
            let i = i-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
         if(a > b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b){
            return b;
        }
        else{
            return a;
        }
        
    }
}
