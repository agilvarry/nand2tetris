// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array screen, twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, val;

        let color = true;
        let screen = 16384;
        let twoToThe = Array.new(16);
        let i = 0;
        let val = 1;
        while(i < 16){
            let twoToThe[i] = val;
            let i = i + 1;
            let val = val + val;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var Array screen;
        var int address;
        let address = 0;
        while (address < 8192){
            let screen[address] = 0;
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, register;
        let address = 32 * y + (x / 16);
        let value = screen[address];

        if(color){
            let value = value | twoToThe[x & 15];
        }else{
            let value = value | ~twoToThe[x & 15];
        }

        let screen[address] = value;
        return;
        
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        
        //horizontal line
        if(dy = 0){
            if(dx < 0){
                let x1 = x1 + x2;
                let x2 = x1 - x2;
                let x1 = x1 - x2;
                let dx = x2 - x1;
            }
            while (a < dx) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
        }

        //vertical line
        
        if (dx = 0) {
            if (dy < 0) {
                let y1 = y1 + y2;
                let y2 = y1 - y2;
                let y1 = y1 - y2;
                let dy = y2 - y1;
            }
            while (b < dy) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
        }
        
        // rising falling   
        
            if (dx < 0) {
                if (dy < 0) {
                    do Screen.fallingLine(x2, -dx, y2, -dy);
                }
                else {
                    do Screen.risingLine(x2, -dx, y2, dy);
                }
            }
            else {
                if (dy < 0) {
                    do Screen.risingLine(x1, dx, y1, -dy);
                }
                else {
                    do Screen.fallingLine(x1, dx, y1, dy);
                }
            }
        
        return;
    }
     function void fallingLine(int x1, int dx, int y1, int dy) {
        var int a, b, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }
    function void risingLine(int x1, int dx, int y1, int dy) {
        var int a, b, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, y1 - b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      do Screen.drawLine(x1, y1, x2, y1);
      do Screen.drawLine(x2, y1, x2, y2);
      do Screen.drawLine(x2, y2, x1, y2);
      do Screen.drawLine(x1, y2, x1, y1);
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i;
        let i = -r;

        while (i < (r + 1)) {
            do Screen.drawLine((x - Math.sqrt((r * r) - (i * i))), (y + i), (x + Math.sqrt((r * r) - (i * i))), (y + i));
            let i = i + 1;
        }
        return;
    }
}
