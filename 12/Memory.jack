// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram, heap;
    static int freeList;
    

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int next, block, fit;
        let next = freeList;
        
        while(next > 0){
            if(ram[next + 1] > (size + 2)){ //check if block large enough
                let fit = next; //set fit location if it is
                let block = (fit + 1 + ram[fit + 1]) - size; //set block address
                let ram[block - 1] = size; //block size
                let ram[fit + 1] = ram[fit + 1] - (size + 2); //block length
            }
            if(ram[next] > 0){           
                let next = ram[next];
            } else{
                let next = 0;
            }   
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let ram[o - 2] = freeList; 
        
        let freeList = o - 2;
        return;
    }    
}
